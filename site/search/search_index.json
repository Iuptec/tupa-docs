{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem vindo ao Tup\u00e3 \u26a1\ufe0f","text":"<p>O Tup\u00e3 \u00e9 um framework backend feito em Go.</p> <p>A ideia do framework \u00e9 ser f\u00e1cil e r\u00e1pido de usar para a cria\u00e7\u00e3o de aplica\u00e7\u00f5es robustas rapidamente.</p> <p>O \u00fanico requisito \u00e9 que Golang, vers\u00e3o 1.21.5 para cima esteja instalado na m\u00e1quina.</p>"},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<pre><code>$ go get github.com/tupatech/tupa\n</code></pre>"},{"location":"#iniciando-um-servidor","title":"Iniciando um Servidor","text":"<p>Para iniciarmos um novo servidor, basta instanciarmos um <code>NewAPIServer(\":porta\")</code> e fazer o bootstrap da API com o m\u00e9todo <code>New()</code>. Inicialize o m\u00f3dulo na sua m\u00e1quina <code>go mod &lt;nome_modulo&gt;</code> e coloque o seguinte conte\u00fado num arquivo <code>main.go</code> </p> <pre><code>import (\n    import \"github.com/tupatech/tupa\"\n)\n\nfunc main() {\n    server := tupa.NewAPIServer(\":6969\")\n    server.New()\n}\n</code></pre> <p>Rode o servidor na m\u00e1quina <code>go run main.go</code>. No browser em <code>http://localhost:6969/</code> vamos receber a seguinte mensagem:</p> <pre><code>\"Seja bem vindo ao Tup\u00e3 framework\"\n</code></pre>"},{"location":"getting_started/","title":"Como funciona o registro de rotas","text":"<p>Tabela de conte\u00fados:</p> <ul> <li>Registro Simples</li> <li>Registro de mais rotas</li> <li>Second Item</li> </ul> <p></p>"},{"location":"getting_started/#registro-simples","title":"Registro simples","text":"<p>De forma simples, podemos instanciar uma rota ao chamar o m\u00e9todo <code>RegisterRoutes([]tupa.RouteInfo{routeInfo})</code>, que podemos acessar facilmente a partir do nosso servidor instanciado.</p> <pre><code>func main() {\n    server := tupa.NewAPIServer(\":6969\")\n    routeInfo := tupa.RouteInfo{\n        Path:   \"/\",\n        Method: \"GET\",\n        Handler: func(tc *tupa.TupaContext) error {\n            return tupa.WriteJSONHelper(*tc.Response(), http.StatusOK, \"Hello world! :D\")\n        },\n    }\n    server.RegisterRoutes([]tupa.RouteInfo{routeInfo})\n\n    server.New()\n}\n</code></pre> <p>Agora em <code>http://localhost:6969/</code>iremos obter a mensagem \"Hello world! :D\".</p> <p>No Tup\u00e3, por padr\u00e3o todo handler deve receber um TupaContext e retornar um erro. Atrav\u00e9s do TupaContext voc\u00ea ser\u00e1 capaz de acessar diversas funcionalidades para a sua requisi\u00e7\u00e3o ser bem sucedida.</p> <p></p>"},{"location":"getting_started/#registro-de-mais-rotas","title":"Registro de mais rotas","text":"<p>Para fazer o registro de novas rotas, podemos simplesmente adicionar mais paths ao array <code>routeInfo</code></p> <pre><code>package main\n\nimport (\n    \"io\"\n    \"net/http\"\n\n    \"github.com/tupatech/tupa\"\n)\n\nfunc main() {\n    server := tupa.NewAPIServer(\":6969\")\n    routeInfo := []tupa.RouteInfo{\n        {\n            Path:   \"/\",\n            Method: \"GET\",\n            Handler: func(tc *tupa.TupaContext) error {\n                return tupa.WriteJSONHelper(*tc.Response(), http.StatusOK, \"Hello world! :D\")\n            },\n        },\n        {\n            Path:   \"/cats\",\n            Method: \"GET\",\n            Handler: func(tc *tupa.TupaContext) error {\n                resp, err := http.Get(\"https://cdn2.thecatapi.com/images/dN6eoeLjY.jpg\")\n                if err != nil {\n                    return err\n                }\n                defer resp.Body.Close()\n                _, err = io.Copy(*tc.Response(), resp.Body)\n                return err\n            },\n        },\n    }\n\n    server.RegisterRoutes(routeInfo)\n    server.New()\n}\n\n</code></pre> <p>Agora teremos os dois endpoints registrados, se <code>/</code>e <code>/cats</code>. Se formos em <code>http://localhost:6969/cat</code> vamos ver a foto de um \ud83d\udc08.</p> <p>Por\u00e9m, em alguns casos vamos precisar registrar rotas com regras diferentes, para isso devemos usar os middlewares. </p>"},{"location":"middlewares/","title":"Middlewares","text":"<p>Tabela de conte\u00fados:</p> <ul> <li>MIddlewares simples</li> <li>Registro de mais rotas</li> <li>Second Item</li> </ul> <p>Usar middlewares no Tup\u00e3 \u00e9 muito f\u00e1cil, podemos implementar middlewares tanto a n\u00edvel de rota quando para conjuntos de rotas.</p> <p></p>"},{"location":"middlewares/#middlewares-simples","title":"Middlewares simples","text":"<p>Vamos adicionar um middleware simples a n\u00edvel de rota. Basta adicionar uma nova propriedade <code>Middlewares</code> dentro do objeto do endpoint.</p> <p>Vamos adicionar um middleware na rota <code>/cats</code>.</p> <pre><code>func main() {\n    server := tupa.NewAPIServer(\":6969\")\n    routeInfo := []tupa.RouteInfo{\n        {\n            Path:   \"/\",\n            Method: \"GET\",\n            Handler: func(tc *tupa.TupaContext) error {\n                return tupa.WriteJSONHelper(*tc.Response(), http.StatusOK, \"Hello world! :D\")\n            },\n        },\n        {\n            Path:   \"/cats\",\n            Method: \"GET\",\n            Handler: func(tc *tupa.TupaContext) error {\n                resp, err := http.Get(\"https://cdn2.thecatapi.com/images/dN6eoeLjY.jpg\")\n                if err != nil {\n                    return err\n                }\n                defer resp.Body.Close()\n                _, err = io.Copy(*tc.Response(), resp.Body)\n                return err\n            },\n            Middlewares: []tupa.MiddlewareFunc{\n                MiddlewareSampleCats,\n            },\n        },\n    }\n\n    server.RegisterRoutes(routeInfo)\n    server.New()\n}\n\nfunc MiddlewareSampleCats(next tupa.APIFunc) tupa.APIFunc {\n    return func(tc *tupa.TupaContext) error {\n        tc.Resp.Header().Set(\"Content-Type\", \"image/jpeg\")\n        tc.Resp.Header().Add(\"Referrer-Policy\", \"alguem interessado em gatos\")\n        return next(tc)\n    }\n}\n</code></pre> <p>Podemos obter o resultado do middleware acima, basta apertar f12 e conferir a requisi\u00e7\u00e3o na aba Network do nosso devtools.</p> <p></p> <p></p>"},{"location":"middlewares/#conjuntos-de-rotas-com-middlewares-diferentes","title":"Conjuntos de rotas com middlewares diferentes","text":"<p>Mas pode ser que queremos adicionar middlewares diferentes para conjuntos de rotas diferentes</p>"}]}